{
  "name": "BPIC15",
  "version": "1.0.0",
  "nodes": [
    {
      "type": "Event",
      "constructor": [
        {
          "prevalent_record": "(record:EventRecord)",
          "result": "(e:Event {timestamp:record.timestamp, activity:record.activity})"
        }
      ]
    },
    {
      "type": "Activity",
      "constructor": [
        {
          "prevalent_record": "(record:EventRecord)",
          "result": "(a:Activity {activity:record.activity, code:record.code})",
          "set_optional_properties": "a.activityDutch = record.activityDutch",
          "infer_observed": true
        }
      ]
    },
    {
      "type": "Application",
      "constructor": [
        {
          "prevalent_record": "(record:EventRecord)",
          "result": "(a:Entity:Application {sysId: record.caseId, startDate:record.startDate, caseStatus:record.caseStatus, parts:record.parts, requestComplete:record.requestComplete, lastPhase:record.lastPhase})",
          "set_optional_properties": "a.termName = record.termName, a.caseProcedure = record.caseProcedure, a.includesSubCases = record.includesSubCases, a.endDatePlanned = record.endDatePlanned, a.landRegisterId = record.landRegisterId, a.sumleges = record.sumleges, a.idOfConceptCase = record.idOfConceptCase",
          "infer_corr_from_event_record": true
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "Municipality",
      "constructor": [
        {
          "prevalent_record": "(record:EventRecord {log:\"BPIC15_1.csv\"})",
          "result": "(a:Entity:Municipality {sysId: \"MunicipalityA\"})",
          "infer_corr_from_event_record": true
        },
        {
          "prevalent_record": "(record:EventRecord {log:\"BPIC15_2.csv\"})",
          "result": "(a:Entity:Municipality {sysId: \"MunicipalityB\"})",
          "infer_corr_from_event_record": true
        },
        {
          "prevalent_record": "(record:EventRecord {log:\"BPIC15_3.csv\"})",
          "result": "(a:Entity:Municipality {sysId: \"MunicipalityC\"})",
          "infer_corr_from_event_record": true
        },
        {
          "prevalent_record": "(record:EventRecord {log:\"BPIC15_4.csv\"})",
          "result": "(a:Entity:Municipality {sysId: \"MunicipalityD\"})",
          "infer_corr_from_event_record": true
        },
        {
          "prevalent_record": "(record:EventRecord {log:\"BPIC15_5.csv\"})",
          "result": "(a:Entity:Municipality {sysId: \"MunicipalityE\"})",
          "infer_corr_from_event_record": true
        }
      ]
    },
    {
      "type": "Resource",
      "constructor": [
        {
          "prevalent_record": "(record:EventRecord)",
          "result": "(resource:Entity:Resource {sysId:record.resource})",
          "infer_corr_from_event_record": true,
          "corr_type": "EXECUTED_BY"
        }
      ],
      "infer_df": true,
      "include_label_in_df": true,
      "merge_duplicate_df": true
    },
    {
      "type": "MonitoringResource",
      "constructor": [
        {
          "prevalent_record": "(record:EventRecord)",
          "result": "(resource:Entity:Resource {sysId:record.monitoringResource})",
          "set_labels": "MonitoringResource",
          "infer_corr_from_event_record": true,
          "corr_type": "MONITORED_BY"
        }
      ]
    },
    {
      "type": "ResponsibleActor",
      "constructor": [
        {
          "prevalent_record": "(record:EventRecord)",
          "result": "(resource:Entity:Resource {sysId:record.responsibleActor})",
          "set_labels": "ResponsibleActor",
          "infer_corr_from_event_record": true,
          "corr_type": "RESPONSIBLE"
        }
      ]
    }
  ],
  "relations": [
    {
      "type": "HAS_RESPONSIBLE_ACTOR",
      "constructed_by_nodes": {
        "prevalent_record": "(:EventRecord {responsibleActor:r.sysId, caseId: a.sysId})",
        "from_node": "(a:Application)",
        "to_node": "(r:ResponsibleActor)"
      },
      "result": "(a) - [:HAS_RESPONSIBLE_ACTOR] -> (r)"
    },
    {
      "type": "MONITORS",
      "constructed_by_nodes": {
        "prevalent_record": "(:EventRecord {resource:r.sysId, monitoringResource: m.sysId})",
        "from_node": "(m:MonitoringResource)",
        "to_node": "(r:Resource)"
      },
      "result": "(m) - [:MONITORS] -> (r)"
    },
    {
      "type": "WORKS_FOR",
      "constructed_by_nodes": {
        "prevalent_record": "(:EventRecord {resource:r.sysId, log: m.sysId})",
        "to_node": "(m:Municipality)",
        "from_node": "(r:Resource)"
      },
      "result": "(r) - [:WORKS_FOR] -> (m)"
    }
  ]
}
